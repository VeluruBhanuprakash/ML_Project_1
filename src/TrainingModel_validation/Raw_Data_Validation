from datetime import datetime
import os
from os import listdir
import re
import json
import shutil
import pandas as pd
from src.application_logging.logger import App_logger
import src.Generic.Utility as utility

class Raw_Data_Validation:
    def __init__(self,path):
        self.Batch_directory =path
        self.schema_path = utility.read_yamlfile(os.path.join("config","params.yaml"))['config']['training_schema']
        self.logger = App_logger()

    def valuesFromSchema(self):
        filepath = "Logs/Training_Logs/valuesfromSchemaValidationLog.txt"
        try:
            with open(self.schema_path,'r') as f:
                dic = json.load(f)
                f.close()
            pattern =dic['SampleFileName']
            LengthOfDateStampInFile = dic['LengthOfDateStampInFile']
            LengthOfTimeStampInFile = dic['LengthOfTimeStampInFile']
            column_names = dic['column_names']
            NumberofColumns = dic['NumberofColumns']
            # add logic to create folders dynamically
            message ="LengthOfDateStampInFile:: %s" %LengthOfDateStampInFile + "\t" + "LengthOfTimeStampInFile:: %s" % LengthOfTimeStampInFile +"\t " + "NumberofColumns:: %s" % NumberofColumns + "\n"
            self.logger.logger(filepath,message)
        except ValueError:
            self.logger.logger(filepath, "Value Error: Value not found inside training_schema.json")
            raise ValueError
        except KeyError:
            self.logger.logger(filepath,"KeyError: key value error incorrect in training_schema.json")
            raise KeyError
        except Exception as e:
            self.logger.logger(filepath, "Exception: occured at training_schema.json, Exception is "+ str(e))
            raise e

        return LengthOfDateStampInFile,LengthOfTimeStampInFile,column_names,NumberofColumns


    def manualRegexCreation(self):
        regex = "['phising']+['\_'']+[\d_]+[\d]+\.csv"
        return regex

    def createDirectoryForGoodBadRawData(self):
        path = "Training_Raw_files_validated/"
        goodpath = os.path.join(path,"Good_Raw/")
        badpath = os.path.join(path,"Bad_Raw")
        training_logs = "Logs/Training_Logs/GeneralLog.txt"
        try:
            utility.createDirectory(goodpath)
            utility.createDirectory(badpath)
        except OSError as e:
            self.logger.logger(training_logs,"Error while creating Directory "+str(e))
            raise OSError


    def deleteExisitingGoodTrainingFolder(self):
        path = "Training_Raw_files_validated/"
        training_logs = "Logs/Training_Logs/GeneralLog.txt"
        try:
            utility.deleteDiretory(os.path.join(path,"Good_Raw/"))
            self.logger.logger(training_logs,"Good_Raw directory deleted successfully.")
        except OSError as e:
            self.logger.logger(training_logs,"Error while deleting Good_Raw Directory "+str(e))
            raise OSError

    def deleteExisitingBadTrainingFolder(self):
        path = "Training_Raw_files_validated/"
        training_logs = "Logs/Training_Logs/GeneralLog.txt"
        try:
            utility.deleteDiretory(os.path.join(path,"Bad_Raw/"))
            self.logger.logger(training_logs,"Bad_Raw directory deleted successfully.")
        except OSError as e:
            self.logger.logger(training_logs,"Error while deleting Bad_Raw Directory "+str(e))
            raise OSError

    def moveBadFilesToArchiveBad(self):
        now = datetime.now()
        date = now.date()
        time = now.strftime("%H:%M:%S")
        source = "Training_Raw_files_validated/Bad_Raw/"
        try:
            if os.path.isdir(source):
                path = "TrainingArchiveBadData"
                utility.createDirectory(path)
            dest ='TrainingArchiveBadData/BadData_'+str(date)+"_"+str(time)
            utility.createDirectory(dest)
            files = os.listdir(source)
            for f in files:
                if f not in os.listdir(dest):
                    shutil.move(source,dest)
            self.logger.logger("Training_Logs/GeneralLog.txt","Bad files moved to archive")
            path = 'Training_Raw_files_validated/'
            if os.path.isdir(path + 'Bad_Raw/'):
                shutil.rmtree(path + 'Bad_Raw/')
            self.logger.logger("Training_Logs/GeneralLog.txt", "Bad Raw Data Folder Deleted successfully!!")
        except Exception as e:
            self.logger.logger("Training_Logs/GeneralLog.txt","Error while moving bad files to archive:: %s" % e)
            raise e